hw1_data <- read.csv("~/Desktop/hw1_data.csv")
View(hw1_data)
data[c(1:2),]
data[c(1:2)]
data[c(1:2),]
x <- [c(1:2)]
x <- c(1:2)
print x
print (x)
data(c(1:2))
colnames(data)
colnames(hw1_data)
data <- hw1_data
data2 <- data[1:2,]
print(data2)
data3 <- data(152:153,)
data3 <- data[152:153,]
print(data3)
data$Ozone[47]
install.packages("swirl")
library("swirl")
swirl()
install_from_swirl("R Programming")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4,) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 100)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files())
args(list.files)
old.dir <- wd
old.dir <- "/Users/mac"
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir(0)
dir()
file.exists("mytest.R")
file.info(mytest.R)
file.info("mytest.R")
file.rename(from "mytest.R", to "mytest2.R"")
file.rename(from "mytest.R", to "mytest2.R")
file.rename(from "mytest.R, to mytest2.R")
file.rename("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path(mytest3.R)
file.path("mytest3.R")
?file.path
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
?recursive
setwd()
setwd("old.dir")
getwd()
setwd(old.dir)
unlink(testdir)
unlink("testdir")
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
?seq_along
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect(0.5, 55, -10, 6)
numeric_version(0.5, 55, -10, 6)
c(.05, 55, -10, 6)
num_vect<- c(.05, 55, -10, 6)
num_vect<- c(0.5, 55, -10, 6)
tf<- c(num_vect < 1)
tf<- num_vect < 1
tf
num_vect >= 6
my_char<- c("MY", "name", "is")
my_char<- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name<- c(my_char, "Brad")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na, na.rm = TRUE)
sum(my_na, TRUE)
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x . 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(vector)
dim(my_vector)
dim("my_vector")
length(my_vector)
dim(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix((1:20), 4, 5)
my_matrix2 <- matrix((1:20), 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind("patients", "my_matrix")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, cnames)
colnames(my_matrix, cnames)
rbind(cnames, my_matrix)
colnames(my_data) <- cnames
my_data
add2 <- function(x, y) {
x + y
}
add2(3, 5)
above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
above(x)
above(x, 12)
above10 <- function(x, n = 10) {
use <- x > 10
x[use]
}
above(x)
above10 <- function(x, n = 10) {
use <- x > 10
x[use]
}
above <- function(x, n = 10) {
use <- x > 10
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
columnmean(airquality)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
source('~/.active-rstudio-document')
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
above <- function(x, n = 10) {
use <- x > 10
x[use]
}
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[, i] na.rm = removeNA)
}
means
}
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(airquality)
swirl()
~
swirl()
library("swirl")
ls90
ls()
rm(list=ls())
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
(5 != 7) == TRUE
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical(twins, tiwns)
identical(twins, twins)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
source()
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4. 3.6, 7.9, 8.8))
evaluate(standard deviation, c(1.4. 3.6, 7.9, 8.8))
evaluate(c(1.4. 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x=8}, c(8, 4, 0))
evaluate(function(x), c(8, 4, 0))
evaluate(function(x) c(8, 4, 0))
evaluate(function(x) first(c(8, 4, 0)))
info()
evaluate(function(x){x=1}, c(8, 4, 0))
evaluate(function(x){first}, c(8, 4, 0))
evaluate(function(x)first, c(8, 4, 0))
evaluate(function(x), c(8, 4, 0))
evaluate(function(x) c(8, 4, 0))
evaluate(function(x) first(c(8, 4, 0))
evaluate(function(x) first(c(8, 4, 0))
evaluate(function(x) first(c(8, 4, 0)))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram()
submit()
mad_libs(place = "San Diego", adjective = "Sunny", noun = "day")
submit()
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unlcass(d2)
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- strptime(("October 17, 1986 08:24"))
t3 <- "October, 2986 08:24"
t3 <- "October, 1986 08:24"
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- 4strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
x^3
cube <- function(x, n) {
x^3
}
cube(3)
if(x > 5) {
x<- 0
}
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 10
x + g(x)
}
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
f(y)
ls()
source("pollutantmean.R")
pollutantmean <- function(directory, pollutant, id = 1:332)
source('~/Desktop/Coursera/cachematrix.R')
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
library(xlsx)
install.packages("RMySQL")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(),user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query,n=10); dbClearResult(query);
dim(affyMisSmall)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
library(httr)
oauth_endpoints("github")
myapp <- oauth_endpoints("github", key = "e2632aed7eedf7dc75ff", secret = "deb577910e578c1a33f19d62c2279e9a20d0fd7c")
myapp <- oauth_endpoint("github", key = "e2632aed7eedf7dc75ff", secret = "deb577910e578c1a33f19d62c2279e9a20d0fd7c")
myapp <- oauth_endpoints("github", key = "e2632aed7eedf7dc75ff", secret = "deb577910e578c1a33f19d62c2279e9a20d0fd7c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_endpoints("github", "e2632aed7eedf7dc75ff", "deb577910e578c1a33f19d62c2279e9a20d0fd7c")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", e2632aed7eedf7dc75ff, deb577910e578c1a33f19d62c2279e9a20d0fd7c
)
myapp <- oauth_app("github", "e2632aed7eedf7dc75ff", "deb577910e578c1a33f19d62c2279e9a20d0fd7c"
)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
stop_for_status(req)
myapp <- oauth_app("github", "e2632aed7eedf7dc75ff", "deb577910e578c1a33f19d62c2279e9a20d0fd7c"
)
source('~/Documents/Getting-and-Cleaning-Data-Course-Project/run_analysis.R')
?write.table
View(allData.mean)
source('~/.active-rstudio-document')
setwd("~/Documents/Getting-and-Cleaning-Data-Course-Project")
source('~/Documents/Getting-and-Cleaning-Data-Course-Project/run_analysis.R')
install.packages("plyr")
source('~/Documents/Getting-and-Cleaning-Data-Course-Project/run_analysis.R')
source('~/Documents/Getting-and-Cleaning-Data-Course-Project/run_analysis.R')
install.packages("plyr")
source('~/Documents/Getting-and-Cleaning-Data-Course-Project/run_analysis.R')
source('~/Documents/Getting-and-Cleaning-Data-Course-Project/run_analysis.R')
source('~/Documents/Getting-and-Cleaning-Data-Course-Project/run_analysis.R')
install.packages("reshape2")
